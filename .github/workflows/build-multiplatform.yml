name: Build Ladybird Multi-Platform

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      build_preset:
        description: 'Build preset to use (e.g., default, Debug)'
        required: true
        default: 'default'

jobs:
  build:
    name: Build Ladybird on ${{ matrix.os_display_name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os_type: macos
            os_runner: macos-latest
            os_display_name: "macOS (Homebrew Clang 19)"
            artifact_name_suffix: "macOS-HBClang19"
            llvm_package: "llvm@19"
          - os_type: linux
            os_runner: ubuntu-latest
            os_display_name: "Linux (Ubuntu Clang 17)"
            clang_version: "17"
            artifact_name_suffix: "Linux-Clang17"

    env:
      BUILD_PRESET_NAME: ${{ github.event.inputs.build_preset || 'default' }}
      LADYBIRD_CHECKOUT_DIR: 'ladybird_source'

    runs-on: ${{ matrix.os_runner }}

    steps:
      - name: Checkout Ladybird Browser repository
        uses: actions/checkout@v4
        with:
          repository: 'LadybirdBrowser/ladybird'
          path: ${{ env.LADYBIRD_CHECKOUT_DIR }}
          fetch-depth: 0

      - name: Set up dynamic environment variables and cache paths
        id: set-env-vars
        run: |
          VCPKG_DOWNLOADS_PATH="${{ runner.temp }}/vcpkg-downloads"
          echo "VCPKG_DOWNLOADS_DIR=${VCPKG_DOWNLOADS_PATH}" >> $GITHUB_OUTPUT
          echo "VCPKG_DOWNLOADS=${VCPKG_DOWNLOADS_PATH}" >> $GITHUB_ENV
          mkdir -p "${VCPKG_DOWNLOADS_PATH}" || { echo "Failed to create VCPKG_DOWNLOADS_PATH"; exit 1; }
          echo "Verified VCPKG_DOWNLOADS_PATH: ${VCPKG_DOWNLOADS_PATH}"

      - name: Cache vcpkg downloads
        uses: actions/cache@v4
        with:
          path: ${{ steps.set-env-vars.outputs.VCPKG_DOWNLOADS_DIR }}
          key: ${{ runner.os }}-vcpkg-downloads-${{ hashFiles(format('{0}/vcpkg.json', env.LADYBIRD_CHECKOUT_DIR), format('{0}/Toolchain/CMakeLists.txt', env.LADYBIRD_CHECKOUT_DIR)) }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-downloads-

      # macOS Specific Setup
      - name: Setup Homebrew Environment (macOS)
        if: matrix.os_type == 'macos'
        run: |
          echo "Ensuring Homebrew is available and its bin directory is in PATH..."
          which brew || /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          BREW_PREFIX_BIN=""
          if [ -x "/opt/homebrew/bin/brew" ]; then BREW_PREFIX_BIN="/opt/homebrew/bin"; fi
          if [ -z "$BREW_PREFIX_BIN" ] && [ -x "/usr/local/bin/brew" ]; then BREW_PREFIX_BIN="/usr/local/bin"; fi
          if [ -n "$BREW_PREFIX_BIN" ]; then echo "$BREW_PREFIX_BIN" >> $GITHUB_PATH; echo "Homebrew bin ($BREW_PREFIX_BIN) added to PATH."; fi
          which brew || { echo "Error: Homebrew not found in PATH after setup."; exit 1; }

      - name: Install macOS dependencies and Setup Compiler (Homebrew ${{ matrix.llvm_package }})
        if: matrix.os_type == 'macos'
        id: setup-macos-compiler
        env:
          LLVM_PACKAGE_NAME: ${{ matrix.llvm_package }}
        run: |
          brew update --quiet
          if ! command -v jq &> /dev/null; then brew install jq || { echo "Failed to install jq"; exit 1; }; fi
          echo "Installing macOS dependencies: autoconf autoconf-archive automake ccache cmake nasm ninja pkg-config $LLVM_PACKAGE_NAME"
          brew install autoconf autoconf-archive automake ccache cmake nasm ninja pkg-config "$LLVM_PACKAGE_NAME"
          echo "--- Verifying installed tools (CMake, Ninja) ---"
          cmake --version; ninja --version
          BREW_LLVM_PREFIX=$(brew --prefix "$LLVM_PACKAGE_NAME")
          if [ -z "$BREW_LLVM_PREFIX" ] || [ ! -d "$BREW_LLVM_PREFIX/bin" ]; then echo "Error: Could not find bin directory for $LLVM_PACKAGE_NAME (path: $BREW_LLVM_PREFIX)."; exit 1; fi
          HB_CLANG="$BREW_LLVM_PREFIX/bin/clang"; HB_CLANG_PLUS_PLUS="$BREW_LLVM_PREFIX/bin/clang++"
          if [ ! -x "$HB_CLANG" ] || [ ! -x "$HB_CLANG_PLUS_PLUS" ]; then echo "Error: Homebrew Clang/Clang++ not found or not executable."; ls -l "$BREW_LLVM_PREFIX/bin/"; exit 1; fi
          echo "Found Homebrew Clang: $HB_CLANG"; "$HB_CLANG" --version
          echo "Found Homebrew Clang++: $HB_CLANG_PLUS_PLUS"; "$HB_CLANG_PLUS_PLUS" --version
          echo "$BREW_LLVM_PREFIX/bin" >> $GITHUB_PATH
          echo "cc_path=$HB_CLANG" >> $GITHUB_OUTPUT
          echo "cxx_path=$HB_CLANG_PLUS_PLUS" >> $GITHUB_OUTPUT

      - name: Modify CMakePresets.json for macOS (Deployment Target and Warning Flags)
        if: matrix.os_type == 'macos'
        working-directory: ./${{ env.LADYBIRD_CHECKOUT_DIR }}
        run: |
          TARGET_PRESET_NAME_TO_MODIFY="${{ env.BUILD_PRESET_NAME }}"
          OSX_DEPLOYMENT_TARGET="14.0"
          # Try to prevent -Wunguarded-availability-new from being an error
          # For .mm files, CMAKE_OBJCXX_FLAGS is more specific, but CMAKE_CXX_FLAGS might also apply
          WARNING_FLAG_CXX="-Wno-error=unguarded-availability-new" 
          WARNING_FLAG_OBJCXX="-Wno-error=unguarded-availability-new"

          echo "Modifying CMakePresets.json for macOS preset '$TARGET_PRESET_NAME_TO_MODIFY':"
          echo "  Setting CMAKE_OSX_DEPLOYMENT_TARGET to $OSX_DEPLOYMENT_TARGET"
          echo "  Adding '$WARNING_FLAG_CXX' to CMAKE_CXX_FLAGS"
          echo "  Adding '$WARNING_FLAG_OBJCXX' to CMAKE_OBJCXX_FLAGS"
          
          cp CMakePresets.json CMakePresets.json.orig

          jq \
            --arg preset_name "$TARGET_PRESET_NAME_TO_MODIFY" \
            --arg deploy_target "$OSX_DEPLOYMENT_TARGET" \
            --arg warning_cxx_flag "$WARNING_FLAG_CXX" \
            --arg warning_objcxx_flag "$WARNING_FLAG_OBJCXX" \
            '
              ( .configurePresets[] | select(.name == $preset_name) ) |=
              (
                # Ensure cacheVariables exists
                (if .cacheVariables == null then .cacheVariables = {} else . end) |
                # Set Deployment Target
                (.cacheVariables.CMAKE_OSX_DEPLOYMENT_TARGET = $deploy_target) |
                # Update CMAKE_CXX_FLAGS
                (.cacheVariables.CMAKE_CXX_FLAGS = ((.cacheVariables.CMAKE_CXX_FLAGS // "") + " " + $warning_cxx_flag | sub("^ +"; "") | sub(" +$"; "") | gsub("  +"; " "))) |
                # Update CMAKE_OBJCXX_FLAGS
                (.cacheVariables.CMAKE_OBJCXX_FLAGS = ((.cacheVariables.CMAKE_OBJCXX_FLAGS // "") + " " + $warning_objcxx_flag | sub("^ +"; "") | sub(" +$"; "") | gsub("  +"; " ")))
              )
            ' CMakePresets.json.orig > CMakePresets.json || { echo "jq command failed to modify CMakePresets.json for macOS. Restoring original."; mv CMakePresets.json.orig CMakePresets.json; exit 1; }
            
          echo "Successfully modified CMakePresets.json for macOS."
          echo "Verifying changes for preset '$TARGET_PRESET_NAME_TO_MODIFY':"
          jq ".configurePresets[] | select(.name == \"$TARGET_PRESET_NAME_TO_MODIFY\") .cacheVariables" CMakePresets.json


      - name: Select and Verify Xcode version (macOS - Informational)
        if: matrix.os_type == 'macos'
        run: |
          echo "--- Xcode Information (Informational) ---"
          echo "Available Xcode versions on runner:"; ls /Applications | grep Xcode || echo "No Xcode installations found"
          echo "Currently selected Xcode path: $(xcode-select -p)"; xcodebuild -version
          echo "System Clang version (for comparison, should NOT be used):"
          if [ -x "/usr/bin/clang" ]; then /usr/bin/clang --version; else echo "/usr/bin/clang not found"; fi

      # Linux Specific Setup
      - name: Setup Environment (Linux - Clang ${{ matrix.clang_version }})
        if: matrix.os_type == 'linux'
        id: setup-env-linux
        run: |
          echo "cc_path=/usr/bin/clang-${{ matrix.clang_version }}" >> $GITHUB_OUTPUT
          echo "cxx_path=/usr/bin/clang++-${{ matrix.clang_version }}" >> $GITHUB_OUTPUT

      - name: Install Linux dependencies and required tool versions (Clang ${{ matrix.clang_version }})
        if: matrix.os_type == 'linux'
        env:
          DEBIAN_FRONTEND: noninteractive
          CLANG_VERSION_TO_INSTALL: ${{ matrix.clang_version }}
          CMAKE_REQUIRED_VERSION: "3.25"
        run: |
          sudo apt-get update -y -q
          sudo apt-get install -y -q --no-install-recommends \
            wget gpg ca-certificates software-properties-common coreutils apt-utils curl jq # Added jq

          INSTALLED_CMAKE_VERSION=$(cmake --version 2>/dev/null | head -n1 | sed 's/cmake version //g' || echo "0.0.0")
          echo "Initial CMake version: $INSTALLED_CMAKE_VERSION"
          if ! dpkg --compare-versions "$INSTALLED_CMAKE_VERSION" "ge" "$CMAKE_REQUIRED_VERSION"; then
            echo "CMake version $INSTALLED_CMAKE_VERSION is < $CMAKE_REQUIRED_VERSION. Installing from Kitware."
            wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
            echo "deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/kitware.list > /dev/null
            sudo apt-get update -y -q
            sudo apt-get remove --purge -y cmake; sudo apt-get install -y -q --no-install-recommends cmake
          else
            echo "CMake version $INSTALLED_CMAKE_VERSION is satisfactory."
          fi
          echo "Final CMake version:"; cmake --version

          sudo wget -O /usr/share/keyrings/llvm-snapshot.gpg.key https://apt.llvm.org/llvm-snapshot.gpg.key
          CODENAME=$(lsb_release -sc)
          LLVM_APT_LINE="deb [signed-by=/usr/share/keyrings/llvm-snapshot.gpg.key] http://apt.llvm.org/$CODENAME/ llvm-toolchain-$CODENAME-$CLANG_VERSION_TO_INSTALL main"
          echo "$LLVM_APT_LINE" | sudo tee "/etc/apt/sources.list.d/llvm-toolchain-$CODENAME-$CLANG_VERSION_TO_INSTALL.list" > /dev/null
          sudo apt-get update -y -q
          sudo apt-get install -y -q --no-install-recommends \
            clang-$CLANG_VERSION_TO_INSTALL clangd-$CLANG_VERSION_TO_INSTALL \
            clang-tools-$CLANG_VERSION_TO_INSTALL clang-format-$CLANG_VERSION_TO_INSTALL \
            clang-tidy-$CLANG_VERSION_TO_INSTALL lld-$CLANG_VERSION_TO_INSTALL \
            libc++-$CLANG_VERSION_TO_INSTALL-dev libc++abi-$CLANG_VERSION_TO_INSTALL-dev

          sudo apt-get install -y -q --no-install-recommends \
            autoconf autoconf-archive automake build-essential ccache \
            fonts-liberation2 git libgl1-mesa-dev nasm ninja-build pkg-config \
            qt6-base-dev qt6-tools-dev-tools qt6-wayland \
            tar unzip zip libpulse-dev
          echo "Clang version used:"; /usr/bin/clang-$CLANG_VERSION_TO_INSTALL --version
          echo "Ninja version:"; ninja --version

      - name: Modify CMakePresets.json for Linux (StdLib and Linker Flags)
        if: matrix.os_type == 'linux'
        working-directory: ./${{ env.LADYBIRD_CHECKOUT_DIR }}
        run: |
          TARGET_PRESET_NAME_TO_MODIFY="${{ env.BUILD_PRESET_NAME }}"
          STDLIB_FLAG="-stdlib=libc++"
          LINK_STDCXX_FLAG="-lstdc++"

          echo "Modifying CMakePresets.json for Linux preset '$TARGET_PRESET_NAME_TO_MODIFY':"
          echo "  Adding '$STDLIB_FLAG' to CMAKE_C_FLAGS and CMAKE_CXX_FLAGS"
          echo "  Adding '$LINK_STDCXX_FLAG' to CMAKE_SHARED_LINKER_FLAGS and CMAKE_EXE_LINKER_FLAGS"
          
          cp CMakePresets.json CMakePresets.json.orig

          jq \
            --arg preset_name "$TARGET_PRESET_NAME_TO_MODIFY" \
            --arg stdlib_flag "$STDLIB_FLAG" \
            --arg link_flag "$LINK_STDCXX_FLAG" \
            '
              ( .configurePresets[] | select(.name == $preset_name) ) |=
              (
                (if .cacheVariables == null then .cacheVariables = {} else . end) |
                (.cacheVariables.CMAKE_C_FLAGS = ((.cacheVariables.CMAKE_C_FLAGS // "") + " " + $stdlib_flag | sub("^ +"; "") | sub(" +$"; "") | gsub("  +"; " "))) |
                (.cacheVariables.CMAKE_CXX_FLAGS = ((.cacheVariables.CMAKE_CXX_FLAGS // "") + " " + $stdlib_flag | sub("^ +"; "") | sub(" +$"; "") | gsub("  +"; " "))) |
                (.cacheVariables.CMAKE_SHARED_LINKER_FLAGS = ((.cacheVariables.CMAKE_SHARED_LINKER_FLAGS // "") + " " + $link_flag | sub("^ +"; "") | sub(" +$"; "") | gsub("  +"; " "))) |
                (.cacheVariables.CMAKE_EXE_LINKER_FLAGS = ((.cacheVariables.CMAKE_EXE_LINKER_FLAGS // "") + " " + $link_flag | sub("^ +"; "") | sub(" +$"; "") | gsub("  +"; " ")))
              )
            ' CMakePresets.json.orig > CMakePresets.json || { echo "jq command failed for Linux flags. Restoring original."; mv CMakePresets.json.orig CMakePresets.json; exit 1; }
            
          echo "Successfully modified CMakePresets.json for Linux flags."
          echo "Verifying changes for preset '$TARGET_PRESET_NAME_TO_MODIFY':"
          jq ".configurePresets[] | select(.name == \"$TARGET_PRESET_NAME_TO_MODIFY\") .cacheVariables" CMakePresets.json


      # Common Build Step
      - name: Configure and Build Ladybird
        id: build-ladybird
        working-directory: ./${{ env.LADYBIRD_CHECKOUT_DIR }}
        run: |
          CURRENT_OS_TYPE="${{ matrix.os_type }}"
          EFFECTIVE_BUILD_PRESET_FOR_SCRIPT="${{ env.BUILD_PRESET_NAME }}"

          if [ "$CURRENT_OS_TYPE" = "macos" ]; then
            export CC="${{ steps.setup-macos-compiler.outputs.cc_path }}"
            export CXX="${{ steps.setup-macos-compiler.outputs.cxx_path }}"
            if [ -z "$CC" ] || [ -z "$CXX" ]; then echo "Error: CC or CXX is not set for macOS."; exit 1; fi
            EXPECTED_LLVM_PREFIX=$(brew --prefix "${{ matrix.llvm_package }}")
            if [[ "$CC" != "$EXPECTED_LLVM_PREFIX/bin/clang" ]] || [[ "$CXX" != "$EXPECTED_LLVM_PREFIX/bin/clang++" ]]; then
              echo "Error: CC/CXX not pointing to expected Homebrew Clang."; exit 1
            fi
          elif [ "$CURRENT_OS_TYPE" = "linux" ]; then
            export CC="${{ steps.setup-env-linux.outputs.cc_path }}"
            export CXX="${{ steps.setup-env-linux.outputs.cxx_path }}"
          else
            echo "Error: Unknown OS type: $CURRENT_OS_TYPE"; exit 1
          fi

          echo "--- Compiler Information ---"
          echo "Using CC: $CC"; $CC --version || { echo "Error: CC version check failed."; exit 1; }
          echo "Using CXX: $CXX"; $CXX --version || { echo "Error: CXX version check failed."; exit 1; }
          
          if [ "$CURRENT_OS_TYPE" = "macos" ]; then
            echo "macOS Deployment Target set to 14.0 and warning flags modified via CMakePresets.json for preset '$EFFECTIVE_BUILD_PRESET_FOR_SCRIPT'"
          elif [ "$CURRENT_OS_TYPE" = "linux" ]; then
            echo "Linux C/CXX flags set to use -stdlib=libc++ and Linker flags to include -lstdc++ via CMakePresets.json for preset '$EFFECTIVE_BUILD_PRESET_FOR_SCRIPT'"
          fi
          echo "--- Build Configuration ---"
          echo "Using EFFECTIVE_BUILD_PRESET_FOR_SCRIPT: $EFFECTIVE_BUILD_PRESET_FOR_SCRIPT"
          
          echo "--- Starting Ladybird Build ---"
          BUILD_PRESET="$EFFECTIVE_BUILD_PRESET_FOR_SCRIPT" ./Meta/ladybird.sh build ladybird
          echo "--- Build Finished ---"
          
          BUILD_OUTPUT_SUBDIRECTORY="" 
          if [[ "$EFFECTIVE_BUILD_PRESET_FOR_SCRIPT" == *"debug"* || "$EFFECTIVE_BUILD_PRESET_FOR_SCRIPT" == *"Debug"* ]]; then BUILD_OUTPUT_SUBDIRECTORY="debug";
          elif [[ "$EFFECTIVE_BUILD_PRESET_FOR_SCRIPT" == *"distribution"* || "$EFFECTIVE_BUILD_PRESET_FOR_SCRIPT" == *"Distribution"* ]]; then BUILD_OUTPUT_SUBDIRECTORY="distribution";
          elif [[ "$EFFECTIVE_BUILD_PRESET_FOR_SCRIPT" == *"sanitizer"* || "$EFFECTIVE_BUILD_PRESET_FOR_SCRIPT" == *"Sanitizer"* ]]; then BUILD_OUTPUT_SUBDIRECTORY="sanitizers";
          elif [[ "$EFFECTIVE_BUILD_PRESET_FOR_SCRIPT" == *"default"* || "$EFFECTIVE_BUILD_PRESET_FOR_SCRIPT" == *"Default"* ]]; then BUILD_OUTPUT_SUBDIRECTORY="release";
          else BUILD_OUTPUT_SUBDIRECTORY=$(echo "$EFFECTIVE_BUILD_PRESET_FOR_SCRIPT" | tr '[:upper:]' '[:lower:]'); if [ -z "$BUILD_OUTPUT_SUBDIRECTORY" ]; then BUILD_OUTPUT_SUBDIRECTORY="unknown_build_dir"; fi; fi
          echo "Determined BUILD_OUTPUT_SUBDIRECTORY: $BUILD_OUTPUT_SUBDIRECTORY"

          if [ ! -d "Build/$BUILD_OUTPUT_SUBDIRECTORY" ]; then
            echo "Error: Build output dir 'Build/$BUILD_OUTPUT_SUBDIRECTORY' not found!"; ls -la Build;
            if [ -d "Build/release" ]; then BUILD_OUTPUT_SUBDIRECTORY="release"; echo "Fallback: Using 'Build/release'";
            elif [ -d "Build/debug" ]; then BUILD_OUTPUT_SUBDIRECTORY="debug"; echo "Fallback: Using 'Build/debug'";
            else BUILD_OUTPUT_SUBDIRECTORY="unknown_artifact_dir"; echo "Fallback Error: Using placeholder '$BUILD_OUTPUT_SUBDIRECTORY'"; fi
          fi
          
          ARTIFACT_FILE_PATH=""
          if [ "$CURRENT_OS_TYPE" = "macos" ]; then ARTIFACT_FILE_PATH="Build/$BUILD_OUTPUT_SUBDIRECTORY/bin/Ladybird.app";
          elif [ "$CURRENT_OS_TYPE" = "linux" ]; then ARTIFACT_FILE_PATH="Build/$BUILD_OUTPUT_SUBDIRECTORY/bin/Ladybird"; fi
          echo "artifact_sub_path=$ARTIFACT_FILE_PATH" >> $GITHUB_OUTPUT
          echo "ACTUAL_BUILD_SUBDIR_FOR_LOGS=$BUILD_OUTPUT_SUBDIRECTORY" >> $GITHUB_OUTPUT

      - name: Upload Ladybird Artifact
        if: success() && steps.build-ladybird.outputs.artifact_sub_path != ''
        uses: actions/upload-artifact@v4
        with:
          name: Ladybird-${{ matrix.artifact_name_suffix }}-${{ env.BUILD_PRESET_NAME }}
          path: ${{ env.LADYBIRD_CHECKOUT_DIR }}/${{ steps.build-ladybird.outputs.artifact_sub_path }}
          if-no-files-found: error
          retention-days: 7

      - name: Upload Build Logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ladybird-build-logs-${{ matrix.artifact_name_suffix }}-${{ env.BUILD_PRESET_NAME }}
          path: |
            ${{ env.LADYBIRD_CHECKOUT_DIR }}/Build/${{ steps.build-ladybird.outputs.ACTUAL_BUILD_SUBDIR_FOR_LOGS }}/**/*.log
            ${{ env.LADYBIRD_CHECKOUT_DIR }}/Build/${{ steps.build-ladybird.outputs.ACTUAL_BUILD_SUBDIR_FOR_LOGS }}/vcpkg-manifest-install.log
            ${{ env.LADYBIRD_CHECKOUT_DIR }}/Build/release/**/*.log
            ${{ env.LADYBIRD_CHECKOUT_DIR }}/Build/release/vcpkg-manifest-install.log
            ${{ env.LADYBIRD_CHECKOUT_DIR }}/Build/debug/**/*.log
            ${{ env.LADYBIRD_CHECKOUT_DIR }}/Build/debug/vcpkg-manifest-install.log
            ${{ env.LADYBIRD_CHECKOUT_DIR }}/**/*.log
          if-no-files-found: ignore
          retention-days: 7