name: Build Ladybird macOS (with Xcode Clang)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      build_preset:
        description: 'Build preset to use (e.g., default, Debug)'
        required: true
        default: 'default'

jobs:
  build-macos:
    name: Build Ladybird on macOS with Xcode Clang
    # 使用最新的 macOS runner，通常带有较新的 Xcode 版本
    # 例如 macos-14 (通常是 macos-latest) 自带 Xcode 15.x
    runs-on: macos-latest 
    
    env:
      BUILD_PRESET_NAME: ${{ github.event.inputs.build_preset || 'default' }}
      LADYBIRD_CHECKOUT_DIR: 'ladybird_source'

    steps:
      - name: Checkout Ladybird Browser repository
        uses: actions/checkout@v4
        with:
          repository: 'LadybirdBrowser/ladybird'
          path: ${{ env.LADYBIRD_CHECKOUT_DIR }}
          fetch-depth: 0 # 获取所有历史记录，某些构建脚本可能需要
          # lfs: true # 如果 LadybirdBrowser/ladybird 仓库使用 LFS，取消此行注释
          # submodules: 'recursive' # 如果 LadybirdBrowser/ladybird 仓库使用子模块，取消此行注释

      - name: Setup Environment (for Xcode Clang)
        id: setup-env
        run: |
          echo "Ensuring Homebrew is available for other tools..."
          which brew || /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          
          echo "Adding Homebrew to PATH for other tools..."
          if [ -d "/usr/local/bin" ]; then echo "/usr/local/bin" >> $GITHUB_PATH; fi # For Intel runners
          if [ -d "/opt/homebrew/bin" ]; then echo "/opt/homebrew/bin" >> $GITHUB_PATH; fi # For Apple Silicon runners

          BREW_PREFIX_BIN=$(brew --prefix)/bin
          echo "$BREW_PREFIX_BIN" >> $GITHUB_PATH
          echo "Homebrew prefix bin path for other tools: $BREW_PREFIX_BIN"
          
          # 设置 CC 和 CXX 指向 Xcode 的 Clang
          # 这些是由 xcode-select 管理的标准路径
          echo "cc_path=/usr/bin/clang" >> $GITHUB_OUTPUT
          echo "cxx_path=/usr/bin/clang++" >> $GITHUB_OUTPUT
          echo "Using Xcode Clang: /usr/bin/clang and /usr/bin/clang++"

      - name: Install macOS dependencies (No Homebrew LLVM, No Qt)
        run: |
          echo "Updating Homebrew..."
          brew update --quiet # 安静模式，减少日志输出
          
          echo "Installing dependencies via Homebrew (excluding llvm and qt)..."
          # 根据 BuildInstructionsLadybird.md，仅安装必要的构建工具
          # cmake, ninja, autoconf, etc.
          brew install autoconf autoconf-archive automake ccache cmake nasm ninja pkg-config
          
          echo "Verifying installed tools..."
          cmake --version
          ninja --version

      - name: Select and Verify Xcode version
        id: xcode-select
        run: |
          echo "Available Xcode versions on runner:"
          ls /Applications | grep Xcode || echo "No Xcode installations found in /Applications"
          
          # Ladybird 需要 Xcode 15 或更高版本。
          # macos-latest (如 macos-14) 通常默认 Xcode 15.x。
          # 如果需要，可以明确选择一个已安装的 Xcode 15+ 版本。
          # 例如，如果 Xcode 15.3 可用:
          #   DESIRED_XCODE_PATH="/Applications/Xcode_15.3.app"
          #   if [ -d "$DESIRED_XCODE_PATH" ]; then
          #     echo "Selecting Xcode: $DESIRED_XCODE_PATH"
          #     sudo xcode-select -s "$DESIRED_XCODE_PATH"
          #   else
          #     echo "Warning: $DESIRED_XCODE_PATH not found. Using runner's default Xcode."
          #   fi

          CURRENT_XCODE_PATH=$(xcode-select -p)
          echo "Currently selected Xcode path: $CURRENT_XCODE_PATH"
          XCODE_VERSION_INFO=$(xcodebuild -version)
          echo "$XCODE_VERSION_INFO"
          
          # 提取 Xcode 主版本号 (例如 15)
          XCODE_MAJOR_VERSION=$(echo "$XCODE_VERSION_INFO" | grep "Xcode" | sed 's/Xcode \([0-9]*\).*/\1/')
          echo "Detected Xcode major version: $XCODE_MAJOR_VERSION"
          echo "xcode_major_version=$XCODE_MAJOR_VERSION" >> $GITHUB_OUTPUT

          if [ "$XCODE_MAJOR_VERSION" -lt 15 ]; then
            echo "Error: Xcode version $XCODE_MAJOR_VERSION is less than the required 15."
            echo "Please ensure the GitHub Actions runner has Xcode 15 or newer, or explicitly select it."
            exit 1
          fi
          
          echo "Verifying selected Clang (should be from Xcode):"
          /usr/bin/clang --version
          /usr/bin/clang++ --version

      - name: Configure and Build Ladybird
        id: build-ladybird
        env:
          # 使用由 setup-env 步骤确定的 Xcode Clang 路径
          CC: ${{ steps.setup-env.outputs.cc_path }}
          CXX: ${{ steps.setup-env.outputs.cxx_path }}
          BUILD_PRESET: ${{ env.BUILD_PRESET_NAME }}
        working-directory: ./${{ env.LADYBIRD_CHECKOUT_DIR }}
        run: |
          echo "--- Current Directory ---"
          pwd
          echo "--- Meta Directory (checking for ladybird.sh) ---"
          ls -la Meta/
          
          echo "--- Compiler Information ---"
          echo "Using CC: $CC"
          $CC --version
          echo "Using CXX: $CXX"
          $CXX --version
          
          echo "--- Build Configuration ---"
          echo "Using BUILD_PRESET: $BUILD_PRESET"
          echo "Xcode major version from previous step: ${{ steps.xcode-select.outputs.xcode_major_version }}"
          
          echo "--- Starting Ladybird Build ---"
          ./Meta/ladybird.sh build ladybird
          
          echo "--- Build Finished ---"
          
          # 确定实际的构建输出目录名，用于上传产物
          ACTUAL_BUILD_SUBDIR="$BUILD_PRESET"
          if [ "$BUILD_PRESET" = "default" ]; then
            # 检查 'default' 预设是否实际输出到 'release' 目录
            if [ -d "Build/release" ] && [ ! -d "Build/default" ]; then
              echo "Default preset appears to use 'release' directory for output."
              ACTUAL_BUILD_SUBDIR="release"
            elif [ ! -d "Build/default" ] && [ ! -d "Build/release" ]; then
              echo "Warning: Neither Build/default nor Build/release found for default preset. Assuming '$BUILD_PRESET' directory."
            fi
          fi

          # 再次检查最终确定的构建子目录是否存在
          if [ ! -d "Build/$ACTUAL_BUILD_SUBDIR" ]; then
            echo "Error: Build output subdirectory 'Build/$ACTUAL_BUILD_SUBDIR' not found!"
            echo "Listing contents of 'Build/' directory:"
            ls -la Build
            exit 1
          fi
          
          echo "artifact_sub_path=Build/$ACTUAL_BUILD_SUBDIR/bin/Ladybird.app" >> $GITHUB_OUTPUT
          echo "Artifact path determined for upload: ./${{ env.LADYBIRD_CHECKOUT_DIR }}/Build/$ACTUAL_BUILD_SUBDIR/bin/Ladybird.app"

      - name: Upload Ladybird.app Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: Ladybird-macOS-XcodeClang-${{ env.BUILD_PRESET_NAME }}
          path: ${{ env.LADYBIRD_CHECKOUT_DIR }}/${{ steps.build-ladybird.outputs.artifact_sub_path }}
          if-no-files-found: error
          retention-days: 7

      - name: Upload Build Logs (Optional, on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ladybird-macos-xcodeclang-build-logs-${{ env.BUILD_PRESET_NAME }}
          path: |
            ${{ env.LADYBIRD_CHECKOUT_DIR }}/Build/${{ env.BUILD_PRESET_NAME }}/**/*.log # May need to adjust if ACTUAL_BUILD_SUBDIR logic is complex
            ${{ env.LADYBIRD_CHECKOUT_DIR }}/Build/${{ env.BUILD_PRESET_NAME }}/vcpkg-manifest-install.log
          if-no-files-found: ignore
          retention-days: 7