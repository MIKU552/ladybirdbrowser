name: Build Ladybird macOS

on:
  push:
    branches: [ main, master ] # 在 main 或 master 分支有推送时触发
  pull_request:
    branches: [ main, master ] # 向 main 或 master 分支发起 PR 时触发
  workflow_dispatch: # 允许手动触发

jobs:
  build-macos:
    name: Build Ladybird on macOS
    runs-on: macos-latest # 使用 GitHub 提供的最新 macOS runner
    
    env:
      # 设置默认的构建预设，可以根据需要覆盖
      # 例如，在手动触发时可以输入不同的 BUILD_PRESET
      BUILD_PRESET_NAME: ${{ github.event.inputs.build_preset || 'default' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # 如果项目使用了 Git LFS
          # lfs: true 
          # 如果项目包含子模块
          # submodules: 'recursive' 
          fetch-depth: 0 # 获取所有历史记录，以防构建脚本需要

      - name: Setup Homebrew and Environment
        id: setup-env
        run: |
          echo "Verifying Homebrew..."
          which brew || /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          
          echo "Adding Homebrew to PATH..."
          # 将 Homebrew 的 bin 目录添加到 GITHUB_PATH 的前面，以优先使用 brew 安装的工具
          # 对于 Intel Mac runner
          if [ -d "/usr/local/bin" ]; then
            echo "/usr/local/bin" >> $GITHUB_PATH
          fi
          # 对于 Apple Silicon (ARM) Mac runner
          if [ -d "/opt/homebrew/bin" ]; then
            echo "/opt/homebrew/bin" >> $GITHUB_PATH
          fi

          # 确保 brew prefix/bin 也在 PATH 中
          BREW_PREFIX_BIN=$(brew --prefix)/bin
          echo "$BREW_PREFIX_BIN" >> $GITHUB_PATH
          echo "Homebrew prefix bin path: $BREW_PREFIX_BIN"

          # 将 Homebrew LLVM/Clang 的路径添加到 GITHUB_PATH
          LLVM_BIN_PATH=$(brew --prefix llvm)/bin
          if [ -d "$LLVM_BIN_PATH" ]; then
            echo "$LLVM_BIN_PATH" >> $GITHUB_PATH
            echo "LLVM bin path added: $LLVM_BIN_PATH"
          else
            echo "Warning: LLVM bin path not found at $LLVM_BIN_PATH after brew install llvm"
          fi
          
          # 设置一些常用的环境变量输出，方便后续步骤使用
          echo "cc_path=$(brew --prefix llvm)/bin/clang" >> $GITHUB_OUTPUT
          echo "cxx_path=$(brew --prefix llvm)/bin/clang++" >> $GITHUB_OUTPUT

      - name: Install macOS dependencies
        run: |
          echo "Updating Homebrew..."
          brew update
          
          echo "Installing dependencies via Homebrew..."
          # 根据 BuildInstructionsLadybird.md
          # Xcode 15 or clang from homebrew is required.
          # brew install autoconf autoconf-archive automake ccache cmake nasm ninja pkg-config
          # If you wish to use clang from homebrew instead: brew install llvm@19 (or latest llvm)
          # If you also plan to use the Qt UI on macOS: brew install qt
          brew install autoconf autoconf-archive automake ccache cmake nasm ninja pkg-config llvm qt6
          
          echo "Verifying installed tools..."
          cmake --version # 应该 >= 3.25
          ninja --version
          clang --version # 应该是 Homebrew 的 Clang
          clang++ --version

      - name: Select Xcode version (Informational)
        run: |
          echo "Available Xcode versions:"
          ls /Applications | grep Xcode || echo "No Xcode installations found in /Applications"
          
          # macos-latest runner 通常会有一个合理的默认 Xcode 版本
          # Ladybird 构建说明要求 Xcode 15 或更高版本
          # 如果需要强制选择特定版本，可以使用 xcode-select，但通常 runner 的默认版本即可
          echo "Currently selected Xcode version:"
          xcode-select -p
          xcodebuild -version
          
          # 显示系统默认的 Clang (通常是 Xcode Clang)
          echo "System Clang version (might be different from Homebrew's):"
          /usr/bin/clang --version

      - name: Configure and Build Ladybird
        id: build-ladybird
        env:
          # 明确指定使用 Homebrew 安装的 Clang/Clang++
          # 这些会被 ladybird.sh 脚本中的 find_compiler.sh 或 pick_host_compiler 检测到
          CC: ${{ steps.setup-env.outputs.cc_path }}
          CXX: ${{ steps.setup-env.outputs.cxx_path }}
          # 将环境变量 BUILD_PRESET 传递给 ladybird.sh
          BUILD_PRESET: ${{ env.BUILD_PRESET_NAME }}
        run: |
          echo "--- Compiler Information ---"
          echo "Using CC: $CC"
          $CC --version
          echo "Using CXX: $CXX"
          $CXX --version
          
          echo "--- Build Configuration ---"
          echo "Using BUILD_PRESET: $BUILD_PRESET"
          
          echo "--- Starting Ladybird Build ---"
          # 调用项目的构建脚本
          # 'build' 是 ladybird.sh 的一个命令，'ladybird' 是要构建的目标
          ./Meta/ladybird.sh build ladybird
          
          echo "--- Build Finished ---"
          
          # 确定实际的构建输出目录名，用于上传产物
          # ladybird.sh 脚本内部通过 get_build_dir "$BUILD_PRESET" 获取构建目录
          # 通常是 Build/preset_name (e.g., Build/default, Build/Debug)
          # 如果 `default` 预设实际输出到 `release` 目录，这里需要特殊处理
          ACTUAL_BUILD_SUBDIR="$BUILD_PRESET"
          if [ "$BUILD_PRESET" = "default" ] && [ -d "Build/release" ] && [ ! -d "Build/default" ]; then
            echo "Default preset seems to use 'release' directory."
            ACTUAL_BUILD_SUBDIR="release"
          elif [ ! -d "Build/$ACTUAL_BUILD_SUBDIR" ]; then
            echo "Error: Build directory 'Build/$ACTUAL_BUILD_SUBDIR' not found!"
            # 列出 Build 目录内容以帮助调试
            ls -la Build
            exit 1
          fi
          echo "artifact_path=Build/$ACTUAL_BUILD_SUBDIR/bin/Ladybird.app" >> $GITHUB_OUTPUT
          echo "Artifact path determined: Build/$ACTUAL_BUILD_SUBDIR/bin/Ladybird.app"

      - name: Upload Ladybird.app Artifact
        if: success() # 仅在构建成功时上传
        uses: actions/upload-artifact@v4
        with:
          name: Ladybird-macOS-${{ env.BUILD_PRESET_NAME }}
          path: ${{ steps.build-ladybird.outputs.artifact_path }}
          if-no-files-found: error # 如果没有找到文件则报错
          retention-days: 7 # 设置产物的保留天数

      - name: Upload Build Logs (Optional, on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ladybird-macos-build-logs-${{ env.BUILD_PRESET_NAME }}
          path: |
            Build/${{ env.BUILD_PRESET_NAME }}/vcpkg-manifest-install.log # vcpkg 日志
            Build/${{ env.BUILD_PRESET_NAME }}/**/*.log # 其他可能的日志文件
          if-no-files-found: ignore
          retention-days: 7