name: Build Ladybird macOS

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs: # 允许手动触发时输入预设名称
      build_preset:
        description: 'Build preset to use (e.g., default, Debug)'
        required: true
        default: 'default'

jobs:
  build-macos:
    name: Build Ladybird on macOS
    runs-on: macos-latest
    
    env:
      # 使用手动触发时的输入或默认值
      BUILD_PRESET_NAME: ${{ github.event.inputs.build_preset || 'default' }}
      # 指定 Ladybird 源代码签出到的目录名
      LADYBIRD_CHECKOUT_DIR: 'ladybird_source'

    steps:
      - name: Checkout Ladybird Browser repository
        uses: actions/checkout@v4
        with:
          repository: 'LadybirdBrowser/ladybird' # <--- 指定签出 Ladybird 官方仓库
          path: ${{ env.LADYBIRD_CHECKOUT_DIR }} # <--- 签出到指定目录
          # ref: 'main' # 可以指定分支，默认是仓库的默认分支
          fetch-depth: 0 # 获取所有历史记录
          # lfs: true # 如果 LadybirdBrowser/ladybird 使用 LFS，取消此行注释
          # submodules: 'recursive' # 如果 LadybirdBrowser/ladybird 使用子模块，取消此行注释

      - name: Setup Homebrew and Environment
        id: setup-env
        run: |
          echo "Verifying Homebrew..."
          which brew || /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          
          echo "Adding Homebrew to PATH..."
          if [ -d "/usr/local/bin" ]; then echo "/usr/local/bin" >> $GITHUB_PATH; fi
          if [ -d "/opt/homebrew/bin" ]; then echo "/opt/homebrew/bin" >> $GITHUB_PATH; fi

          BREW_PREFIX_BIN=$(brew --prefix)/bin
          echo "$BREW_PREFIX_BIN" >> $GITHUB_PATH
          echo "Homebrew prefix bin path: $BREW_PREFIX_BIN"

          LLVM_BIN_PATH=$(brew --prefix llvm)/bin
          if [ -d "$LLVM_BIN_PATH" ]; then
            echo "$LLVM_BIN_PATH" >> $GITHUB_PATH
            echo "LLVM bin path added: $LLVM_BIN_PATH"
          else
            echo "Warning: LLVM bin path not found. Will attempt to install LLVM."
          fi
          
          echo "cc_path=$(brew --prefix llvm)/bin/clang" >> $GITHUB_OUTPUT
          echo "cxx_path=$(brew --prefix llvm)/bin/clang++" >> $GITHUB_OUTPUT

      - name: Install macOS dependencies (No Qt)
        run: |
          echo "Updating Homebrew..."
          brew update
          
          echo "Installing dependencies via Homebrew (llvm for clang, no qt)..."
          brew install autoconf autoconf-archive automake ccache cmake nasm ninja pkg-config llvm
          
          echo "Verifying installed tools..."
          cmake --version
          ninja --version
          # 确保使用的是 brew 安装的 clang
          $(brew --prefix llvm)/bin/clang --version
          $(brew --prefix llvm)/bin/clang++ --version

      - name: Select Xcode version (Informational)
        run: |
          echo "Available Xcode versions:"
          ls /Applications | grep Xcode || echo "No Xcode installations found in /Applications"
          echo "Currently selected Xcode version:"
          xcode-select -p
          xcodebuild -version
          echo "System Clang version (might be different from Homebrew's):"
          /usr/bin/clang --version

      - name: Configure and Build Ladybird
        id: build-ladybird
        env:
          CC: ${{ steps.setup-env.outputs.cc_path }}
          CXX: ${{ steps.setup-env.outputs.cxx_path }}
          BUILD_PRESET: ${{ env.BUILD_PRESET_NAME }}
        working-directory: ./${{ env.LADYBIRD_CHECKOUT_DIR }} # <--- 进入签出的 Ladybird 代码目录
        run: |
          echo "--- Current Directory ---"
          pwd
          ls -la
          echo "--- Meta Directory ---"
          ls -la Meta/ # 确认 Meta/ladybird.sh 是否存在
          
          echo "--- Compiler Information ---"
          echo "Using CC: $CC"
          $CC --version
          echo "Using CXX: $CXX"
          $CXX --version
          
          echo "--- Build Configuration ---"
          echo "Using BUILD_PRESET: $BUILD_PRESET"
          
          echo "--- Starting Ladybird Build ---"
          ./Meta/ladybird.sh build ladybird # 现在应该能找到脚本了
          
          echo "--- Build Finished ---"
          
          # 确定实际的构建输出目录名，用于上传产物
          # (这个逻辑可能需要根据 ladybird 项目的实际 CMakePresets.json 调整)
          ACTUAL_BUILD_SUBDIR="$BUILD_PRESET"
          if [ "$BUILD_PRESET" = "default" ] && [ -d "Build/release" ] && [ ! -d "Build/default" ]; then
            echo "Default preset seems to use 'release' directory."
            ACTUAL_BUILD_SUBDIR="release"
          elif [ ! -d "Build/$ACTUAL_BUILD_SUBDIR" ]; then
            echo "Error: Build directory 'Build/$ACTUAL_BUILD_SUBDIR' not found!"
            ls -la Build
            exit 1
          fi
          # 产物路径是相对于 working-directory (即 LADYBIRD_CHECKOUT_DIR)
          echo "artifact_sub_path=Build/$ACTUAL_BUILD_SUBDIR/bin/Ladybird.app" >> $GITHUB_OUTPUT
          echo "Artifact path determined for upload: ./${{ env.LADYBIRD_CHECKOUT_DIR }}/Build/$ACTUAL_BUILD_SUBDIR/bin/Ladybird.app"

      - name: Upload Ladybird.app Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: Ladybird-macOS-${{ env.BUILD_PRESET_NAME }}
          # path 需要是相对于仓库根目录的路径，或者使用绝对路径
          # steps.build-ladybird.outputs.artifact_sub_path 是相对于 LADYBIRD_CHECKOUT_DIR 的路径
          path: ${{ env.LADYBIRD_CHECKOUT_DIR }}/${{ steps.build-ladybird.outputs.artifact_sub_path }}
          if-no-files-found: error
          retention-days: 7

      - name: Upload Build Logs (Optional, on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ladybird-macos-build-logs-${{ env.BUILD_PRESET_NAME }}
          path: |
            ${{ env.LADYBIRD_CHECKOUT_DIR }}/Build/${{ env.BUILD_PRESET_NAME }}/**/*.log
            ${{ env.LADYBIRD_CHECKOUT_DIR }}/Build/${{ env.BUILD_PRESET_NAME }}/vcpkg-manifest-install.log
          if-no-files-found: ignore
          retention-days: 7